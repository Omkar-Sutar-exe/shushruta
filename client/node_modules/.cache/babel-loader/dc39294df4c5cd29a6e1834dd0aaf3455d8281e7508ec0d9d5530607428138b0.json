{"ast":null,"code":"import { createOrder } from \"./FetchApi\";\nexport const fetchData = async (cartListProduct, dispatch) => {\n  dispatch({\n    type: \"loading\",\n    payload: true\n  });\n  try {\n    let responseData = await cartListProduct();\n    if (responseData && responseData.Products) {\n      setTimeout(function () {\n        dispatch({\n          type: \"cartProduct\",\n          payload: responseData.Products\n        });\n        dispatch({\n          type: \"loading\",\n          payload: false\n        });\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// TEMP DISABLED PAYMENT: fetch BrainTree token\n// export const fetchbrainTree = async (getBrainTreeToken, setState) => {\n//   try {\n//     let responseData = await getBrainTreeToken();\n//     if (responseData && responseData) {\n//       setState({\n//         clientToken: responseData.clientToken,\n//         success: responseData.success,\n//       });\n//       console.log(responseData);\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n// TEMP DISABLED PAYMENT: payment logic\n// export const pay = async (\n//   data,\n//   dispatch,\n//   state,\n//   setState,\n//   getPaymentProcess,\n//   totalCost,\n//   history\n// ) => {\n//   console.log(state);\n//   if (!state.address) {\n//     setState({ ...state, error: \"Please provide your address\" });\n//   } else if (!state.phone) {\n//     setState({ ...state, error: \"Please provide your phone number\" });\n//   } else {\n//     let nonce;\n//     state.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         dispatch({ type: \"loading\", payload: true });\n//         nonce = data.nonce;\n//         let paymentData = {\n//           amountTotal: totalCost(),\n//           paymentMethod: nonce,\n//         };\n//         getPaymentProcess(paymentData)\n//           .then(async (res) => {\n//             if (res) {\n//               let orderData = {\n//                 allProduct: JSON.parse(localStorage.getItem(\"cart\")),\n//                 user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\n//                 amount: res.transaction.amount,\n//                 transactionId: res.transaction.id,\n//                 address: state.address,\n//                 phone: state.phone,\n//               };\n//               try {\n//                 let resposeData = await createOrder(orderData);\n//                 if (resposeData.success) {\n//                   localStorage.setItem(\"cart\", JSON.stringify([]));\n//                   dispatch({ type: \"cartProduct\", payload: null });\n//                   dispatch({ type: \"cartTotalCost\", payload: null });\n//                   dispatch({ type: \"orderSuccess\", payload: true });\n//                   setState({ clientToken: \"\", instance: {} });\n//                   dispatch({ type: \"loading\", payload: false });\n//                   return history.push(\"/\");\n//                 } else if (resposeData.error) {\n//                   console.log(resposeData.error);\n//                 }\n//               } catch (error) {\n//                 console.log(error);\n//               }\n//             }\n//           })\n//           .catch((err) => {\n//             console.log(err);\n//           });\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         setState({ ...state, error: error.message });\n//       });\n//   }\n// };\n\n// New: Create order without payment (no gateway). Uses address/phone and cart\nexport const placeOrderWithoutPayment = async (data, dispatch, state, setState, totalCost, history) => {\n  if (!state.address) {\n    setState({\n      ...state,\n      error: \"Please provide your address\"\n    });\n    return;\n  }\n  if (!state.phone) {\n    setState({\n      ...state,\n      error: \"Please provide your phone number\"\n    });\n    return;\n  }\n  try {\n    dispatch({\n      type: \"loading\",\n      payload: true\n    });\n    const orderData = {\n      allProduct: JSON.parse(localStorage.getItem(\"cart\")),\n      user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\n      amount: totalCost(),\n      transactionId: \"NO_PAYMENT\",\n      address: state.address,\n      phone: state.phone\n    };\n    const response = await createOrder(orderData);\n    if (response && response.success) {\n      localStorage.setItem(\"cart\", JSON.stringify([]));\n      dispatch({\n        type: \"cartProduct\",\n        payload: null\n      });\n      dispatch({\n        type: \"cartTotalCost\",\n        payload: null\n      });\n      dispatch({\n        type: \"orderSuccess\",\n        payload: true\n      });\n      setState({\n        ...state,\n        error: false,\n        success: true\n      });\n      dispatch({\n        type: \"loading\",\n        payload: false\n      });\n      history.push(\"/\");\n    } else if (response && response.error) {\n      setState({\n        ...state,\n        error: response.error\n      });\n      dispatch({\n        type: \"loading\",\n        payload: false\n      });\n    } else {\n      dispatch({\n        type: \"loading\",\n        payload: false\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: \"loading\",\n      payload: false\n    });\n    setState({\n      ...state,\n      error: \"Failed to create order\"\n    });\n  }\n};","map":{"version":3,"names":["createOrder","fetchData","cartListProduct","dispatch","type","payload","responseData","Products","setTimeout","error","console","log","placeOrderWithoutPayment","data","state","setState","totalCost","history","address","phone","orderData","allProduct","JSON","parse","localStorage","getItem","user","_id","amount","transactionId","response","success","setItem","stringify","push"],"sources":["C:/Users/TUF GAMING/OneDrive/Desktop/BE project/working on shushruta/shushruta/client/src/components/shop/order/Action.js"],"sourcesContent":["import { createOrder } from \"./FetchApi\";\r\n\r\nexport const fetchData = async (cartListProduct, dispatch) => {\r\n  dispatch({ type: \"loading\", payload: true });\r\n  try {\r\n    let responseData = await cartListProduct();\r\n    if (responseData && responseData.Products) {\r\n      setTimeout(function () {\r\n        dispatch({ type: \"cartProduct\", payload: responseData.Products });\r\n        dispatch({ type: \"loading\", payload: false });\r\n      }, 1000);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// TEMP DISABLED PAYMENT: fetch BrainTree token\r\n// export const fetchbrainTree = async (getBrainTreeToken, setState) => {\r\n//   try {\r\n//     let responseData = await getBrainTreeToken();\r\n//     if (responseData && responseData) {\r\n//       setState({\r\n//         clientToken: responseData.clientToken,\r\n//         success: responseData.success,\r\n//       });\r\n//       console.log(responseData);\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// TEMP DISABLED PAYMENT: payment logic\r\n// export const pay = async (\r\n//   data,\r\n//   dispatch,\r\n//   state,\r\n//   setState,\r\n//   getPaymentProcess,\r\n//   totalCost,\r\n//   history\r\n// ) => {\r\n//   console.log(state);\r\n//   if (!state.address) {\r\n//     setState({ ...state, error: \"Please provide your address\" });\r\n//   } else if (!state.phone) {\r\n//     setState({ ...state, error: \"Please provide your phone number\" });\r\n//   } else {\r\n//     let nonce;\r\n//     state.instance\r\n//       .requestPaymentMethod()\r\n//       .then((data) => {\r\n//         dispatch({ type: \"loading\", payload: true });\r\n//         nonce = data.nonce;\r\n//         let paymentData = {\r\n//           amountTotal: totalCost(),\r\n//           paymentMethod: nonce,\r\n//         };\r\n//         getPaymentProcess(paymentData)\r\n//           .then(async (res) => {\r\n//             if (res) {\r\n//               let orderData = {\r\n//                 allProduct: JSON.parse(localStorage.getItem(\"cart\")),\r\n//                 user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\r\n//                 amount: res.transaction.amount,\r\n//                 transactionId: res.transaction.id,\r\n//                 address: state.address,\r\n//                 phone: state.phone,\r\n//               };\r\n//               try {\r\n//                 let resposeData = await createOrder(orderData);\r\n//                 if (resposeData.success) {\r\n//                   localStorage.setItem(\"cart\", JSON.stringify([]));\r\n//                   dispatch({ type: \"cartProduct\", payload: null });\r\n//                   dispatch({ type: \"cartTotalCost\", payload: null });\r\n//                   dispatch({ type: \"orderSuccess\", payload: true });\r\n//                   setState({ clientToken: \"\", instance: {} });\r\n//                   dispatch({ type: \"loading\", payload: false });\r\n//                   return history.push(\"/\");\r\n//                 } else if (resposeData.error) {\r\n//                   console.log(resposeData.error);\r\n//                 }\r\n//               } catch (error) {\r\n//                 console.log(error);\r\n//               }\r\n//             }\r\n//           })\r\n//           .catch((err) => {\r\n//             console.log(err);\r\n//           });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error);\r\n//         setState({ ...state, error: error.message });\r\n//       });\r\n//   }\r\n// };\r\n\r\n// New: Create order without payment (no gateway). Uses address/phone and cart\r\nexport const placeOrderWithoutPayment = async (\r\n  data,\r\n  dispatch,\r\n  state,\r\n  setState,\r\n  totalCost,\r\n  history\r\n) => {\r\n  if (!state.address) {\r\n    setState({ ...state, error: \"Please provide your address\" });\r\n    return;\r\n  }\r\n  if (!state.phone) {\r\n    setState({ ...state, error: \"Please provide your phone number\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    dispatch({ type: \"loading\", payload: true });\r\n    const orderData = {\r\n      allProduct: JSON.parse(localStorage.getItem(\"cart\")),\r\n      user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\r\n      amount: totalCost(),\r\n      transactionId: \"NO_PAYMENT\",\r\n      address: state.address,\r\n      phone: state.phone,\r\n    };\r\n\r\n    const response = await createOrder(orderData);\r\n    if (response && response.success) {\r\n      localStorage.setItem(\"cart\", JSON.stringify([]));\r\n      dispatch({ type: \"cartProduct\", payload: null });\r\n      dispatch({ type: \"cartTotalCost\", payload: null });\r\n      dispatch({ type: \"orderSuccess\", payload: true });\r\n      setState({ ...state, error: false, success: true });\r\n      dispatch({ type: \"loading\", payload: false });\r\n      history.push(\"/\");\r\n    } else if (response && response.error) {\r\n      setState({ ...state, error: response.error });\r\n      dispatch({ type: \"loading\", payload: false });\r\n    } else {\r\n      dispatch({ type: \"loading\", payload: false });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({ type: \"loading\", payload: false });\r\n    setState({ ...state, error: \"Failed to create order\" });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}